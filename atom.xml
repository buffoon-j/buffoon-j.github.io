<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://buffoon-j.github.io</id>
    <title>Buffoon&apos;s world</title>
    <updated>2022-04-05T10:56:43.201Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://buffoon-j.github.io"/>
    <link rel="self" href="https://buffoon-j.github.io/atom.xml"/>
    <subtitle>一枚菜鸟的博客</subtitle>
    <logo>https://buffoon-j.github.io/images/avatar.png</logo>
    <icon>https://buffoon-j.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Buffoon&apos;s world</rights>
    <entry>
        <title type="html"><![CDATA[求立方体类Box的变面积和体积]]></title>
        <id>https://buffoon-j.github.io/post/qiu-li-fang-ti-lei-box-de-bian-mian-ji-he-ti-ji/</id>
        <link href="https://buffoon-j.github.io/post/qiu-li-fang-ti-lei-box-de-bian-mian-ji-he-ti-ji/">
        </link>
        <updated>2022-04-05T07:27:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="求立方体类box的变面积和体积">求立方体类Box的变面积和体积</h1>
<h2 id="题目">题目</h2>
<p>此题作为重学JavaSE的第一道基础题。</p>
<blockquote>
<p>设计一个立方体类Box，定义三个属性，分别是长，宽，高。定义二个方法，分别计算并输出立方体的体积和表面积。</p>
</blockquote>
<h2 id="代码">代码</h2>
<pre><code class="language-java">//Box.java
public class Box {
    private int width;
    private int height;
    private int length;
    private int area;
    private int volume;

    public Box(int width, int height, int length) {
        this.width = width;
        this.height = height;
        this.length = length;
    }

    public Box() {
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getLength() {
        return length;
    }

    public void setLength(int length) {
        this.length = length;
    }

    public int getArea() {
        return area;
    }

    public void setArea(int area) {
        this.area = area;
    }

    public int getVolume() {
        return volume;
    }

    public void setVolume(int volume) {
        this.volume = volume;
    }
}

</code></pre>
<pre><code class="language-java">//Calculator.java
public class Calculator {
    public static int area(int length, int width, int height) {
        int area = length * width + length * height + width * height;
        area *= 2;
        return area;
    }
    public static int volume(int length, int width, int height) {
        int volume = length * width * height;
        return volume;
    }
}
</code></pre>
<pre><code class="language-java">//Operator.java
import java.util.Scanner;

public class Operator {
    public void operate(Box box){
        Scanner scanner = new Scanner(System.in);
        int length = scanner.nextInt();
        int width = scanner.nextInt();
        int height = scanner.nextInt();
        box.setArea(Calculator.area(length, width, height));
        box.setVolume(Calculator.volume(length, width, height));
        scanner.close();

    }
}
</code></pre>
<pre><code class="language-java">//Main.java
public class Main {
    public static void main(String[] args) {
        Operator operator = new Operator();
        Box box = new Box();
        operator.operate(box);
        System.out.println(&quot;area: &quot; + box.getArea() + &quot;\nvolume: &quot; + box.getVolume());
    }

}
</code></pre>
<h2 id="分析">分析</h2>
<table>
<thead>
<tr>
<th>类</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Box</td>
<td>用来存储立方体Box的长宽高以及面积体积等属性</td>
</tr>
<tr>
<td>Calculator</td>
<td>用来计算Box的面积体积</td>
</tr>
<tr>
<td>Operator</td>
<td>用来应对用户的输入以及类之间数据的传输</td>
</tr>
<tr>
<td>Main</td>
<td>创建Box对象和Operator对象以及输出结果</td>
</tr>
</tbody>
</table>
<h2 id="运行结果">运行结果</h2>
<figure data-type="image" tabindex="1"><img src="https://buffoon-j.github.io/post-images/1649143708631.png" alt="" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>对好多基础知识仍不熟悉，这源于在一开始学习Java时的不认真，重学Java的计划仍需不断推进。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[匿名代码块与static代码块]]></title>
        <id>https://buffoon-j.github.io/post/ni-ming-dai-ma-kuai-yu-static-dai-ma-kuai/</id>
        <link href="https://buffoon-j.github.io/post/ni-ming-dai-ma-kuai-yu-static-dai-ma-kuai/">
        </link>
        <updated>2021-04-25T05:40:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="匿名代码块与static代码块">匿名代码块与static代码块</h1>
<h2 id="补充static关键词中关于静态方法块的内容-sup1sup">补充<code>static</code>关键词中关于静态方法块的内容。<a href="#refer-anchor-1"><sup>[1]</sup></a></h2>
<p>首先看一下测试代码</p>
<pre><code class="language-Java">public class Person {
//    构造方法
    Person(){
        System.out.println(&quot;构造方法&quot;);
    }

//    匿名方法块
    {
        System.out.println(&quot;匿名方法块&quot;);
    }

//    static方法块
    static {
        System.out.println(&quot;静态方法块&quot;);
    }
}


class Test {
    public static void main(String[] args) {
        Person person1 = new Person();
        System.out.println(&quot;=======================&quot;);
        Person person2 = new Person();
    }
}
</code></pre>
<p>运行结果：</p>
<figure data-type="image" tabindex="1"><img src="https://buffoon-j.github.io/post-images/1649108024369.png" alt="" loading="lazy"></figure>
<p>由运行结果可知：</p>
<ul>
<li>
<p>在类初次被加载的时候，会最先加载<strong>静态方法块</strong>，然后加载<strong>匿名方法块</strong>，最后在加载<strong>构造方法</strong>。</p>
</li>
<li>
<p>但静态方法块只会加载一次，在第二次加载类时，只会加载先加载匿名方法块和构造方法。</p>
</li>
<li>
<p>所以也可以用匿名代码块来进行一些初始赋值，一些只进行一次的操作则放在静态代码块里。</p>
</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.bilibili.com/video/BV12J41137hu?p=73">遇见狂神说.  面向对象14：static关键字详解</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA中Maven配置问题]]></title>
        <id>https://buffoon-j.github.io/post/idea-zhong-maven-pei-zhi-wen-ti/</id>
        <link href="https://buffoon-j.github.io/post/idea-zhong-maven-pei-zhi-wen-ti/">
        </link>
        <updated>2021-04-05T14:38:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="idea中maven配置问题">IDEA中Maven配置问题</h1>
<h2 id="问题">问题</h2>
<p>初学maven，在设置idea的maven配置时发现了一个问题。我每次创建maven项目时，无论是否修改maven配置，都会使用IDEA自带的maven。</p>
<p>解决这个问题，只需要先关闭项目。<br>
<img src="https://buffoon-j.github.io/post-images/1649109345470.png" alt="" loading="lazy"></p>
<p>在最开始的页面进入设置。<br>
<img src="https://buffoon-j.github.io/post-images/1649109352508.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://buffoon-j.github.io/post-images/1649109358920.png" alt="" loading="lazy"></figure>
<p>只需要在这里设置Maven的路径和其他设置，就不会有创建新项目时，Maven的配置全部恢复默认的情况。<br>
<img src="https://buffoon-j.github.io/post-images/1649109366972.png" alt="" loading="lazy"></p>
<ul>
<li>个人理解：可以理解为打开项目时的设置为针对某一项目的设置，并不是全局设置。关闭所有项目在初始页进行设置为全局设置。</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://blog.csdn.net/m0_46975599/article/details/105982031">Steve_hanhaiLong.  IDEA中配置Maven常见问题每次都需要更改setting设置，否则使用默认Maven，完美解决Maven的配置问题！</a></li>
</ul>
]]></content>
    </entry>
</feed>